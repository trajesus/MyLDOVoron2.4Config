#####################################################################
#   Modules
#####################################################################
[firmware_retraction] # Enable Firmware retraction

[gcode_arcs] # Enable support for gcode arc (G2/G3) commands.

[exclude_object] # Enable object exclusion

[pause_resume]   # Enable pausing prints

[save_variables] # Enable saving variables to a file
filename: ~/printer_data/config/variables.cfg

######################################################################
# Beeper
######################################################################

[pwm_cycle_time BEEPER_pin]
pin: EXP1_1
#   Beeper pin. This parameter must be provided.
#   EXP1_1 is the default Octopus pin.
value: 0
#   Silent at power on, set to 1 if active low.
shutdown_value: 0
#   Disable at emergency shutdown (no PWM would be available anyway).
cycle_time: 0.001
#   Default PWM frequency : 0.001 = 1ms will give a tone of 1kHz
#   Although not pitch perfect.

######################################################################
# Sensorless Homing
######################################################################
# https://github.com/kyleisah/EZ-Klipper-Macros/blob/main/Config/Sensorless-Homing.cfg

[gcode_macro _Sensorless_Homing_Variables] ## XY Sensorless Homing Variables:
description: Variables for sensorless homing X and Y

variable_homing_current: 0.0                # The desired motor current for homing the X and Y axes. Leave as '0.0' to use run_current values instead.
variable_clear_time: 1                      # Time in seconds to wait for stallguard registers to clear, default is 1 second.
variable_x_backoff_distance: 5              # Distance in mm to back off from the X axis after homing.
variable_y_backoff_distance: 5              # Distance in mm to back off from the Y axis after homing.
variable_z_hop_distance: 10                 # Distance to move Z axis prior to homing, and after homing.
variable_first_homed_axis: 'X'              # First axis to home when 'G28' is called. Some prefer homing Y before X.

## The following variables are used for moving the printhead to a certain part of the bed before homing the Z axis:

variable_safe_z_enable: True                # Enables/disables moving the printhead before homing the Z axis.
variable_safe_x: 226.8                      # Safe X position to home the Z axis, leave at -128 to home to the center of the X axis. 229.1
variable_safe_y: 346.5                      # Safe Y position to home the Z axis, leave at -128 to home to the center of the Y axis. 350

# Do not modify below
gcode:

[gcode_macro _HOME_X]
gcode:

    {% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}            # Pull variables from _Sensorless_Homing_Variables
    {% set homing_current = sensorless_variables.homing_current | float %}                          #
    {% set backoff_distance = sensorless_variables.x_backoff_distance | float %}                    #
    {% set clear_time = (sensorless_variables.clear_time * 1000) | float %}                         #

    {% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}        # Pull X axis homing speed from config
    {% set homing_speed = (printer.configfile.settings['stepper_x'].homing_speed * 60) | float %}   #

    {% if homing_current != 0.0 %}                                                                  # If a homing_current is defined, do the following:
      {% if 'y' not in printer.toolhead.homed_axes %}                                               # Check if the Y axis is not homed, if Y is not homed,
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}                                  # set the homing_current
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}                                  #
      {% elif 'x' in printer.toolhead.homed_axes %}                                                 # 
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}                                  # If X is already homed but is requested to home again,
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}                                  # set the homing_current
      {% endif %}                                                                                   #
    {% endif %}                                                                                     #

    #G4 P{clear_time}                                                                               # Wait for stallguard registers to clear - moved below

    G28 X                                                                                           # Home the X axis

    {% if backoff_distance > 0 %}                                                                   # Check if variable_backoff_distance is greater than 0, and back off from axis
      {% if positive_dir == True %}                                                                 # Check if the axis is homed in the positive direction
        G91                                                                                         # If it is, back away in the negative direction
        G0 X-{backoff_distance} F{homing_speed}                                                     #
        G90                                                                                         #
      {% else %}                                                                                    #
        G91                                                                                         # If the axis is not homed in the positive direction,
        G0 X{backoff_distance} F{homing_speed}                                                      # back away in the positive direction
        G90                                                                                         #
      {% endif %}                                                                                   #
    {% endif %}                                                                                     #

    G4 P{clear_time}                                                                                # Wait for stallguard registers to clear

    #{% if positive_dir == True %}                                                                   # Check if homing direction is positive
    #  G0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}               # Set X axis position to remove offset incurred from sensorless homing
    #{% else %}                                                                                      #
    #  G0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}               # Set X axis position to remove offset incurred from sensorless homing
    #{% endif %}                                                                                     #

    {% if homing_current != 0.0 %}                                                                  # Check if a homing_current was configured

      {% if 'tmc2209 stepper_x' in printer %}                                                       # If a homing current was configured, figure out the driver type for X
        {% set driver_x = 'tmc2209' %}                                                              # and define them as driver_x
      {% elif 'tmc5160 stepper_x' in printer %}                                                     #
        {% set driver_x = 'tmc5160' %}                                                              #
      {% elif 'tmc2130 stepper_x' in printer %}                                                     #
        {% set driver_x = 'tmc2130' %}                                                              # https://www.klipper3d.org/Config_Reference.html#tmc-stepper-driver-configuration
      {% elif 'tmc2660 stepper_x' in printer %}                                                     # All drivers at the address above containing SGTHRS or SGT configurations
        {% set driver_x = 'tmc2660' %}                                                              # are checked here
      {% elif 'tmc2240 stepper_x' in printer %}                                                     #
        {% set driver_x = 'tmc2240' %}                                                              #
      {% endif %}                                                                                   #

      {% if 'tmc2209 stepper_y' in printer %}                                                       # If a homing current was configured, figure out the driver type for Y
        {% set driver_y = 'tmc2209' %}                                                              # and define them as driver_y
      {% elif 'tmc5160 stepper_y' in printer %}                                                     #
        {% set driver_y = 'tmc5160' %}                                                              #
      {% elif 'tmc2130 stepper_y' in printer %}                                                     #
        {% set driver_y = 'tmc2130' %}                                                              # https://www.klipper3d.org/Config_Reference.html#tmc-stepper-driver-configuration
      {% elif 'tmc2660 stepper_y' in printer %}                                                     # All drivers at the address above containing SGTHRS or SGT configurations
        {% set driver_y = 'tmc2660' %}                                                              # are checked here
      {% elif 'tmc2240 stepper_y' in printer %}                                                     #
        {% set driver_y = 'tmc2240' %}                                                              #
      {% endif %}                                                                                   #

      {% if 'y' in printer.toolhead.homed_axes %}                                                       # If the Y axis is already homed, do the following:
        {% set default_current_x = printer.configfile.settings[driver_x +' stepper_x'].run_current %}   # Set default_current_x to stepper_x's run_current
        {% set default_current_y = printer.configfile.settings[driver_y +' stepper_y'].run_current %}   # Set default_current_y to stepper_y's run_current
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}                                   # Revert stepper_x's current to stepper_x's run_current
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}                                   # Revert stepper_y's current to stepper_y's run_current
      {% endif %}
    {% endif %}                                                                                     # End of homing_current section

    G4 P{clear_time}                                                                                # Wait for stallguard registers to clear

[gcode_macro _HOME_Y]
gcode:

    {% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}            # Pull variables from _Sensorless_Homing_Variables
    {% set homing_current = sensorless_variables.homing_current | float %}                          #
    {% set backoff_distance = sensorless_variables.y_backoff_distance | float %}                    #
    {% set clear_time = (sensorless_variables.clear_time * 1000) | float %}                         #

    {% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}        # Pull Y axis homing speed from config
    {% set homing_speed = (printer.configfile.settings['stepper_y'].homing_speed * 60) | float %}   #

    {% if homing_current != 0.0 %}                                                                  # If a homing_current is defined, do the following:
      {% if 'x' not in printer.toolhead.homed_axes %}                                               # Check if the X axis is not homed, if X is not homed,
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}                                  # set the homing_current
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}                                  #
      {% elif 'y' in printer.toolhead.homed_axes %}                                                 # 
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}                                  # If Y is already homed but is requested to home again,
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}                                  # set the homing_current
      {% endif %}                                                                                   #
    {% endif %}                                                                                     #

    #G4 P{clear_time}                                                                               # Wait for stallguard registers to clear - moved below

    G28 Y                                                                                           # Home the Y axis

    {% if backoff_distance > 0 %}                                                                   # Check if variable_backoff_distance is greater than 0, and back off from axis
      {% if positive_dir == True %}                                                                 # Check if the axis is homed in the positive direction
        G91                                                                                         # If it is, back away in the negative direction
        G0 Y-{backoff_distance} F{homing_speed}                                                     #
        G90                                                                                         #
      {% else %}                                                                                    #
        G91                                                                                         # If the axis is not homed in the positive direction,
        G0 Y{backoff_distance} F{homing_speed}                                                      # back away in the positive direction
        G90                                                                                         #
      {% endif %}                                                                                   #
    {% endif %}                                                                                     #

    G4 P{clear_time}                                                                                # Wait for stallguard registers to clear

    #{% if positive_dir == True %}                                                                   # Check if homing direction is positive
    #  G0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}               # Set Y axis position to remove offset incurred from sensorless homing
    #{% else %}                                                                                      #
    #  G0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}               # Set Y axis position to remove offset incurred from sensorless homing
    #{% endif %}                                                                                     #

    {% if homing_current != 0.0 %}                                                                  # Check if a homing_current is configured

      {% if 'tmc2209 stepper_x' in printer %}                                                       # If a homing current was configured, figure out the driver type for X
        {% set driver_x = 'tmc2209' %}                                                              # and define them as driver_x
      {% elif 'tmc5160 stepper_x' in printer %}                                                     #
        {% set driver_x = 'tmc5160' %}                                                              #
      {% elif 'tmc2130 stepper_x' in printer %}                                                     #
        {% set driver_x = 'tmc2130' %}                                                              # https://www.klipper3d.org/Config_Reference.html#tmc-stepper-driver-configuration
      {% elif 'tmc2660 stepper_x' in printer %}                                                     # All drivers at the address above containing SGTHRS or SGT configurations
        {% set driver_x = 'tmc2660' %}                                                              # are checked here
      {% elif 'tmc2240 stepper_x' in printer %}                                                     #
        {% set driver_x = 'tmc2240' %}                                                              #
      {% endif %}                                                                                   #

      {% if 'tmc2209 stepper_y' in printer %}                                                       # If a homing current was configured, figure out the driver type for Y
        {% set driver_y = 'tmc2209' %}                                                              # and define them as driver_y
      {% elif 'tmc5160 stepper_y' in printer %}                                                     #
        {% set driver_y = 'tmc5160' %}                                                              #
      {% elif 'tmc2130 stepper_y' in printer %}                                                     #
        {% set driver_y = 'tmc2130' %}                                                              # https://www.klipper3d.org/Config_Reference.html#tmc-stepper-driver-configuration
      {% elif 'tmc2660 stepper_y' in printer %}                                                     # All drivers at the address above containing SGTHRS or SGT configurations
        {% set driver_y = 'tmc2660' %}                                                              # are checked here
      {% elif 'tmc2240 stepper_y' in printer %}                                                     #
        {% set driver_y = 'tmc2240' %}                                                              #
      {% endif %}                                                                                   #

      {% if 'x' in printer.toolhead.homed_axes %}                                                       # If the X axis is already homed, do the following:
        {% set default_current_x = printer.configfile.settings[driver_x +' stepper_x'].run_current %}   # Set default_current_x to stepper_x's run_current
        {% set default_current_y = printer.configfile.settings[driver_y +' stepper_y'].run_current %}   # Set default_current_y to stepper_y's run_current
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}                                   # Revert stepper_x's current to stepper_x's run_current
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}                                   # Revert stepper_y's current to stepper_y's run_current
      {% endif %}
    {% endif %}                                                                                     # End of homing_current section

    G4 P{clear_time}                                                                                # Wait for stallguard registers to clear

[homing_override]
axes: xyz
set_position_z: 0
gcode:

    {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}              #
    {% set z_hop_speed = (printer.configfile.settings['stepper_z'].homing_speed * 60) | float %}    #
    {% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}                           #
    {% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}            #
    {% set z_hop_distance = sensorless_variables.z_hop_distance | float %}                          # Collect all variables needed for sensorless homing
    {% set first_homed_axis = sensorless_variables.first_homed_axis | string %}                     # from machine config file and _Sensorless_Homing_Variables
    {% set safe_x = sensorless_variables.safe_x | float %}                                          #
    {% set safe_y = sensorless_variables.safe_y | float %}                                          #
    {% set safe_z = sensorless_variables.safe_z_enable | abs %}                                     #

    {% if printer.configfile.settings.beacon is defined %}                                          # Check if a third-party [probe] definiton is used
        {% set probe_name = printer.configfile.settings.beacon %}                                   # If [beacon] is found in config, set 'probe_name' as [beacon] config string
    {% elif printer.configfile.settings.probe is defined %}                                         #
        {% set probe_name = printer.configfile.settings.probe %}                                    # If [probe] is found in config, set 'probe_name' as [probe] config string
    {% elif printer.configfile.settings.dockable_probe is defined %}                                #
        {% set probe_name = printer.configfile.settings.dockable_probe %}                           # If [dockable_probe] is found in config, set 'probe_name' as [dockable_probe] config string
    {% elif printer.configfile.settings.bltouch is defined %}                                       #
        {% set probe_name = printer.configfile.settings.bltouch %}                                  # If [bltouch] is found in config, set 'probe_name' as [bltouch] config string
    {% endif %}                                                                                     #

    {% if 'probe' in printer.configfile.settings.stepper_z.endstop_pin %}                           # Check if Z is configured to home with a probe and pull config values for
        {% set probe_x_offset = probe_name.x_offset | float %}                                      # X and Y offsets
        {% set probe_y_offset = probe_name.y_offset | float %}                                      #
    {% else %}                                                                                      #
        {% set probe_x_offset = 0 | float %}                                                        #
        {% set probe_y_offset = 0 | float %}                                                        # If Z if not homed with a probe, set offsets to 0 (do not apply an offset)
    {% endif %}                                                                                     #

    {% if safe_x == -128 %}                                                                         #
        {% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}                  # If safe_x is '-128', set safe_x to the center of the X axis
    {% endif %}                                                                                     #

    {% if probe_x_offset < 0 %}                                                                     #
        {% set safe_x = safe_x + probe_x_offset %}                                                  #
    {% elif probe_x_offset > 0 %}                                                                   # Depending on if probe_x_offset is a positive or negative value, adjust safe_x
        {% set safe_x = safe_x - probe_x_offset %}                                                  # If the machine does not home Z with a probe, an offset is not applied.
    {% endif %}                                                                                     #

    {% if safe_y == -128 %}                                                                         # 
        {% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}                  # If safe_y is '-128', set safe_y to the center of the Y axis
    {% endif %}                                                                                     #

    {% if probe_y_offset < 0 %}                                                                     #
        {% set safe_y = safe_y + probe_y_offset %}                                                  #
    {% elif probe_y_offset > 0 %}                                                                   # Depending on if probe_y_offset is a positive or negative value, adjust safe_y
        {% set safe_y = safe_y - probe_y_offset %}                                                  # If the machine does not home Z with a probe, an offset is not applied.
    {% endif %}                                                                                     #

    {% if z_hop_distance > 0 %}                                                                     # Check if z_hop_distance is greater than zero
      {% if 'x' not in printer.toolhead.homed_axes and 'y' not in printer.toolhead.homed_axes %}    # If X and Y are not homed, move Z to z_hop_distance
        G0 Z{z_hop_distance} F{z_hop_speed}                                                         #
      {% endif %}                                                                                   #
    {% endif %}                                                                                     #

    {% if first_homed_axis == 'X' %}                                                                # If first_homed_axis is 'X', begin G28 param check
      {% if home_all or 'X' in params %}                                                            #
        _HOME_X                                                                                     # If home_all or 'X' is in params, home X
      {% endif %}                                                                                   #
      {% if home_all or 'Y' in params %}                                                            # If home_all or 'Y' in params, home Y
        _HOME_Y                                                                                     #
      {% endif %}                                                                                   #
    {% endif %}                                                                                     #

    {% if first_homed_axis == 'Y' %}                                                                # If first_homed_axis is 'Y', begin G28 param check
      {% if home_all or 'Y' in params %}                                                            #
        _HOME_Y                                                                                     # if home_all or 'Y' is in params, home Y
      {% endif %}                                                                                   #
      {% if home_all or 'X' in params %}                                                            # If home_all or 'X' in params, home X
        _HOME_X                                                                                     #
      {% endif %}                                                                                   #
    {% endif %}                                                                                     #

    {% if safe_z == True and (home_all or 'Z' in params) %}                                         # If safe_z is true and home_all or 'Z' is in params,
        G0 X{safe_x} Y{safe_y} F{travel_speed}                                                      # Move to the defined safe XY location
    {% endif %}                                                                                     #

    {% if home_all or 'Z' in params %}                                                              #
        G28 Z                                                                                       # Home the Z axis
        G0 Z{z_hop_distance} F{z_hop_speed}                                                         # Move Z to z_hop_distance
    {% endif %}                                                                                     #



#####################################################################
#   Macros
#####################################################################

# Macro to turn on or off the LEDs
[gcode_macro LIGHTS_ON]
gcode:
  SET_PIN PIN=caselight VALUE=1.00 #turn lights on

[gcode_macro LIGHTS_OFF]
gcode:
  SET_PIN PIN=caselight VALUE=0.00 #turn lights off


# M300: Play tone. Beeper support, as commonly found on usual LCD
# displays (i.e. RepRapDiscount 2004 Smart Controller, RepRapDiscount
# 12864 Full Graphic). This defines a custom I/O pin and a custom
# GCODE macro.  Usage:
#   M300 [P<ms>] [S<Hz>]
#   P is the tone duration, S the tone frequency.
# The frequency won't be pitch perfect.
[gcode_macro M300]
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0

#allow disabling specific motors
[gcode_macro M84] 
rename_existing:M84.1
gcode:
  {% if 'X' in params or 'Y' in params or 'Z' in params or 'E' in params %}
  {% if 'X' in params %}
      SET_STEPPER_ENABLE STEPPER=stepper_x enable=0
  {% endif %}
  {% if 'Y' in params %}
      SET_STEPPER_ENABLE STEPPER=stepper_y enable=0
  {% endif %}
  {% if 'Z' in params %}
      SET_STEPPER_ENABLE STEPPER=stepper_z enable=0
      SET_STEPPER_ENABLE STEPPER=stepper_z1 enable=0
      SET_STEPPER_ENABLE STEPPER=stepper_z2 enable=0
      SET_STEPPER_ENABLE STEPPER=stepper_z3 enable=0
  {% endif %}
  {% if 'E' in params %}
      SET_STEPPER_ENABLE STEPPER=extruder enable=0
  {% endif %}
  {% else %}
      SET_STEPPER_ENABLE STEPPER=stepper_x enable=0
      SET_STEPPER_ENABLE STEPPER=stepper_y enable=0
      SET_STEPPER_ENABLE STEPPER=stepper_z enable=0
      SET_STEPPER_ENABLE STEPPER=stepper_z1 enable=0
      SET_STEPPER_ENABLE STEPPER=stepper_z2 enable=0
      SET_STEPPER_ENABLE STEPPER=stepper_z3 enable=0
      SET_STEPPER_ENABLE STEPPER=extruder enable=0
  {% endif %}

# TMC Debugging - adapted from:  https://github.com/pedrolamas/klipper-config/blob/7720705aa437a46bf50a02f16c2b3849ae16d4ac/ender-3-v2/user_macros.cfg#L129-L133
[gcode_macro M122]
gcode:
  {% if 'X' in params or 'Y' in params or 'Z' in params or 'E' in params %}
  {% if 'X' in params %}
      DUMP_TMC STEPPER=stepper_x
  {% endif %}
  {% if 'Y' in params %}
      DUMP_TMC STEPPER=stepper_y
  {% endif %}
  {% if 'Z' in params %}
      DUMP_TMC STEPPER=stepper_z
      DUMP_TMC STEPPER=stepper_z1
      DUMP_TMC STEPPER=stepper_z2
      DUMP_TMC STEPPER=stepper_z3
  {% endif %}
  {% if 'E' in params %}
      DUMP_TMC STEPPER=extruder
  {% endif %}
  {% else %}
      DUMP_TMC STEPPER=stepper_x
      DUMP_TMC STEPPER=stepper_y
      DUMP_TMC STEPPER=stepper_z
      DUMP_TMC STEPPER=stepper_z1
      DUMP_TMC STEPPER=stepper_z2
      DUMP_TMC STEPPER=stepper_z3
      DUMP_TMC STEPPER=extruder
  {% endif %}


# Linear Advance Factor - https://github.com/pedrolamas/klipper-config/blob/7720705aa437a46bf50a02f16c2b3849ae16d4ac/ender-3-v2/user_macros.cfg#L129-L133
[gcode_macro M900]
gcode:
  {% set K = params.K | default(0, true) | float %}
  SET_PRESSURE_ADVANCE ADVANCE={K}

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    QUAD_GANTRY_LEVEL
    G28
    G0 X175 Y175 Z30 F3600
    RESTORE_GCODE_STATE NAME=STATE_G32

# load filament from https://klipperscreen.readthedocs.io/en/latest/macros/
[gcode_macro LOAD_FILAMENT]
variable_load_distance:     90 # updated distance for G2, was 70
variable_purge_distance:    30
variable_retract_distance:  5
variable_purge_speed:       5 # in mm/s
gcode:
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    M300 # beep
    G91  # Relative position
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{purge_speed * 60} # purge
    G1 E-{retract_distance} F{purge_speed * 60} # retract a small distance after loading and purging
    M300 # beep
    M300 # beep
    G90  # Absolut position
    RESTORE_GCODE_STATE NAME=load_state

# unload filament from https://klipperscreen.readthedocs.io/en/latest/macros/
[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:   90 # updated distance for G2, was 80
variable_purge_distance:    30
variable_retract_distance:  10 # updated distance for G2, was 5
variable_purge_speed:       5  # in mm/s
gcode:
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    M300 # beep
    G91  # Relative position
    G92 E0
    G1 E{purge_distance} F{purge_speed * 60} # purge
    G1 E-{retract_distance} F{purge_speed * 60} # retract a small distance after loading and purging
    G4 P2000  # wait a bit
    G1 E-{unload_distance-retract_distance} F{max_velocity} # fast-unload
    M300 # beep
    M300 # beep
    G90  # Absolut position
    RESTORE_GCODE_STATE NAME=unload_state

# from https://github.com/Klipper3d/klipper/blob/master/config/sample-macros.cfg
# The macro below will override the default M117 command to echo the message.
#
# It uses the rawparams pseudo-variable that contains the full unparsed
# parameters that was passed to the M117 command.
#
# As this can include comments, we are trimming the text when a `;` or `#` is
# found, and escaping any existing `"`

#M118 shows a pop up in screen and also in console
[gcode_macro M117]
rename_existing: M117.1
gcode:
  {% if rawparams %}
    {% set escaped_msg = rawparams.split(';', 1)[0].split('\x23', 1)[0]|replace('"', '\\"') %}
    SET_DISPLAY_TEXT MSG="{escaped_msg}"
    RESPOND TYPE=command MSG="{escaped_msg}"
  {% else %}
    SET_DISPLAY_TEXT
  {% endif %}

######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(50)|float %} #was 0
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91  # Relative position
    G1 E-.8 F2700  # Retract a small amount
    G1 Z{Z} F1200 # Move Z up
    G90  # Absolut position
    G1 X{X} Y{Y} F30000  # Move to parking position
    UNLOAD_FILAMENT      # Run the unload Filament macro
    RESTORE_GCODE_STATE NAME=M600_state

#####################################################################
#   Shell Commands Macros
#####################################################################

#https://staubgeborener.github.io/klipper-backup/manual/#shell
[gcode_macro update_git]
gcode:
    RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command: bash -c "bash ~/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_macro update_kliper_config_octopus]
gcode:
    RUN_SHELL_COMMAND CMD=kliper_config_octopus_script
    RUN_SHELL_COMMAND CMD=katapult_config_octopus_script

[gcode_shell_command kliper_config_octopus_script]
command: bash -c "cp ~/.octopus_klipper_config ~/klipper/.config"
timeout: 90.0
verbose: True

[gcode_shell_command katapult_config_octopus_script]
command: bash -c "cp ~/.octopus_katapult_config ~/katapult/.config"
timeout: 90.0
verbose: True

[gcode_macro update_kliper_config_nh]
gcode:
    RUN_SHELL_COMMAND CMD=kliper_config_nh_script

[gcode_shell_command kliper_config_nh_script]
command: bash -c "cp ~/.nh_klipper_config ~/klipper/.config"
timeout: 90.0
verbose: True

######################################################################
# Input shaper 
######################################################################

[gcode_shell_command get_x_png_script]
command: bash -c "~/klipper/scripts/calibrate_shaper.py /tmp/calibration_data_x_*.csv -o ~/printer_data/config/shaper_calibrate_x.png" 
timeout: 90.0
verbose: True

[gcode_shell_command get_y_png_script]
command: bash -c "~/klipper/scripts/calibrate_shaper.py /tmp/calibration_data_y_*.csv -o ~/printer_data/config/shaper_calibrate_y.png"
timeout: 90.0
verbose: True

[gcode_macro get_shaper_graph]
gcode:
    RUN_SHELL_COMMAND CMD=get_x_png_script
    RUN_SHELL_COMMAND CMD=get_y_png_script

#####################################################################
#   Nitehawk Fan Macros
#####################################################################
## This config file contains macros that can be used in conjunction with tacho-enabled part fans
##
## - PREFLIGHT_CHECK, add this to the beginning of your PRINT_START macro to check your PCF fans. 
##     If either of the fans are malfunctioning, the print job will be cancelled.

#[gcode_macro PCF_CHECK]
#description: sub-macro of PREFLIGHT CHECK, not intended to be used outside of parent macro
#gcode:
#  {% if printer.fan.rpm is not none %}
#    {% if printer.fan.rpm > 500 %}
#      {action_respond_info("Part fan self-test: PASS")}
#    {% else %}
#      CANCEL_PRINT
#      {action_respond_info("Part fan self-test: FAIL!")}
#    {% endif %}
#  {% endif %}

#[gcode_macro PREFLIGHT_CHECK]
#description: Use before print startup, checks the part fan for failures
#gcode:
#  M106 S128 ; turn on the part fan
#  G4 P2000  ; wait for the fan to spin up
#  M400
#  PCF_CHECK ; check part fan speed
#  M106 S0   ; turn off the part fan

#####################################################################
#   print_start macro
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Z_TILT_ADJUST if your printer is a Trident
## Quad gantry level if your printer is a V2
## Nevermore - if you have one

[gcode_macro PRINT_START]
gcode:
    # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
    {% set target_bed = params.BED|int %}
    {% set target_extruder = params.EXTRUDER|int %}
    {% set target_chamber = params.CHAMBER|default("40")|int %}
    {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

    LIGHTS_ON             #turn lights on
    
    # Homes the printer, sets absolute positioning, and updates the Stealthburner LEDs.
    STATUS_HOMING         # Sets SB-LEDs to homing-mode
    G28                   # Full home (XYZ)
    G90                   # Absolut position
    
    ##  Uncomment for bed mesh (1 of 2)
    BED_MESH_CLEAR        # Clears old saved bed mesh (if any)
    
    # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
    {% if params.BED|int > 90 %}
      SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
      STATUS_HEATING                                      # Sets SB-LEDs to heating-mode
      M106 S255                                           # Turns on the PT-fan
      G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
      M190 S{target_bed}                                  # Sets the target temp for the bed
      SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Displays info
      TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp
    
    # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
    {% else %}
      SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
      STATUS_HEATING                                      # Sets SB-LEDs to heating-mode
      G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
      M190 S{target_bed}                                  # Sets the target temp for the bed
      SET_DISPLAY_TEXT MSG="Soak for 5min"                # Displays info
      G4 P300000                                          # Waits 5 min for the bedtemp to stabilize
    {% endif %}
    
    # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
    SET_DISPLAY_TEXT MSG="Hotend: 150c"          # Displays info
    M109 S150                                    # Heats the nozzle to 150c
    
    ##  Uncomment for V2 (Quad gantry level AKA QGL)
    SET_DISPLAY_TEXT MSG="QGL"      # Displays info
    STATUS_LEVELING                 # Sets SB-LEDs to leveling-mode
    QUAD_GANTRY_LEVEL               # Levels the buildplate via QGL
    G28 Z                           # Homes Z again after QGL
    
    ##  Uncomment for bed mesh (2 of 2)
    SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
    STATUS_MESHING                     # Sets SB-LEDs to bed mesh-mode
    BED_MESH_CALIBRATE                 # Starts bed mesh
    
    # Heats up the nozzle up to target via data from slicer
    SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
    STATUS_HEATING                                                # Sets SB-LEDs to heating-mode
    SMART_PARK                                                    # KAMP SMART PARK feature
    M107                                                          # Turns off part cooling fan
    M109 S{target_extruder}                                       # Heats the nozzle to printing temp

    # Gets ready to print by doing a purge line and updating the SB-LEDs
    SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
    STATUS_PRINTING                                  # Sets SB-LEDs to printing-mode
    #LINE_PURGE                                      # KAMP line Purge 
    VORON_PURGE                                      # KAMP Voron Purge 

#####################################################################
#   print_end macro
#####################################################################
#   Use PRINT_END for the slicer ending script - please customize for your slicer of choice
[gcode_macro PRINT_END]
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 10, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                                     ; wait for buffer to clear
    G92 E0                                   ; zero the extruder
    G1 E-5.0 F1800                           ; retract filament
    G92 E0                                   ; zero the extruder again
    
    TURN_OFF_HEATERS

    G90                                      ; absolute positioning
    G1 Z{z_safe} F1800                       ; move nozzle up to remove stringing
    G1 X{x_safe} Y{y_safe} F6000             ; move nozzle away from print to remove stringing
    G4 P2000                                 ; Wait 2 seconds for stallguard registers to clear
    G28 X Y ; Home x and Y
    G1 X{th.axis_maximum.x // 2} Y{th.axis_maximum.y - 5} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    M84 X Y E                                ; Disable steppers, excluding z

    BEDFANSOFF                               ; The Filter turn off
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    

######################################################################
# PID tune
######################################################################
#https://www.reddit.com/r/klippers/comments/y5jw8h/pid_tuning_macros/
[gcode_macro PID_EXTRUDER] 
description: PID Tune for the Extruder gcode:
gcode:
  {% set TARGET_TEMP = params.TARGET_TEMP|default(210)|float %}
  PID_CALIBRATE HEATER=extruder TARGET={TARGET_TEMP}
  TURN_OFF_HEATERS 
  SAVE_CONFIG

[gcode_macro PID_BED] 
description: PID Tune for the Bed gcode:
gcode:
  {% set TARGET_TEMP = params.TARGET_TEMP|default(60)|float %}
  PID_CALIBRATE HEATER=heater_bed TARGET={TARGET_TEMP}
  TURN_OFF_HEATERS 
  SAVE_CONFIG

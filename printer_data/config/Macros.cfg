######################################################################
# Beeper
######################################################################

[pwm_cycle_time BEEPER_pin]
pin: EXP1_1
#   Beeper pin. This parameter must be provided.
#   EXP1_1 is the default Octopus pin.
value: 0
#   Silent at power on, set to 1 if active low.
shutdown_value: 0
#   Disable at emergency shutdown (no PWM would be available anyway).
cycle_time: 0.001
#   Default PWM frequency : 0.001 = 1ms will give a tone of 1kHz
#   Although not pitch perfect.

#####################################################################
#   Macros
#####################################################################

# M300: Play tone. Beeper support, as commonly found on usual LCD
# displays (i.e. RepRapDiscount 2004 Smart Controller, RepRapDiscount
# 12864 Full Graphic). This defines a custom I/O pin and a custom
# GCODE macro.  Usage:
#   M300 [P<ms>] [S<Hz>]
#   P is the tone duration, S the tone frequency.
# The frequency won't be pitch perfect.
[gcode_macro M300]
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0

#allow disabling specific motors
[gcode_macro M84] 
rename_existing:M84.1
gcode:

  {% if 'X' in params or 'Y' in params or 'Z' in params or 'E' in params %}
  {% if 'X' in params %}
      SET_STEPPER_ENABLE STEPPER=stepper_x enable=0
  {% endif %}
  {% if 'Y' in params %}
      SET_STEPPER_ENABLE STEPPER=stepper_y enable=0
  {% endif %}
  {% if 'Z' in params %}
      SET_STEPPER_ENABLE STEPPER=stepper_z enable=0
      SET_STEPPER_ENABLE STEPPER=stepper_z1 enable=0
      SET_STEPPER_ENABLE STEPPER=stepper_z2 enable=0
      SET_STEPPER_ENABLE STEPPER=stepper_z3 enable=0
  {% endif %}
  {% if 'E' in params %}
      SET_STEPPER_ENABLE STEPPER=extruder enable=0
  {% endif %}
  {% else %}
      SET_STEPPER_ENABLE STEPPER=stepper_x enable=0
      SET_STEPPER_ENABLE STEPPER=stepper_y enable=0
      SET_STEPPER_ENABLE STEPPER=stepper_z enable=0
      SET_STEPPER_ENABLE STEPPER=stepper_z1 enable=0
      SET_STEPPER_ENABLE STEPPER=stepper_z2 enable=0
      SET_STEPPER_ENABLE STEPPER=stepper_z3 enable=0
      SET_STEPPER_ENABLE STEPPER=extruder enable=0
  {% endif %}

# TMC Debugging - https://github.com/pedrolamas/klipper-config/blob/7720705aa437a46bf50a02f16c2b3849ae16d4ac/ender-3-v2/user_macros.cfg#L129-L133
[gcode_macro M122]
gcode:
  DUMP_TMC STEPPER=stepper_x
  DUMP_TMC STEPPER=stepper_y
  DUMP_TMC STEPPER=stepper_z
  DUMP_TMC STEPPER=stepper_z1
  DUMP_TMC STEPPER=stepper_z2
  DUMP_TMC STEPPER=stepper_z3
  DUMP_TMC STEPPER=extruder

# Linear Advance Factor - https://github.com/pedrolamas/klipper-config/blob/7720705aa437a46bf50a02f16c2b3849ae16d4ac/ender-3-v2/user_macros.cfg#L129-L133
[gcode_macro M900]
gcode:
  {% set K = params.K | default(0, true) | float %}
  SET_PRESSURE_ADVANCE ADVANCE={K}

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    QUAD_GANTRY_LEVEL
    G28
    G0 X175 Y175 Z30 F3600
    RESTORE_GCODE_STATE NAME=STATE_G32

# load filament from https://klipperscreen.readthedocs.io/en/latest/macros/
[gcode_macro LOAD_FILAMENT]
variable_load_distance:     70
variable_purge_distance:    30
variable_retract_distance:  1
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    M300 # beep
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    G1 E-{retract_distance} F{speed} # retract a small distance after loading and purging
    M300 # beep
    M300 # beep
    RESTORE_GCODE_STATE NAME=load_state

# unload filament from https://klipperscreen.readthedocs.io/en/latest/macros/
[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:   80
variable_purge_distance:    30
variable_retract_distance:  5
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    M300 # beep
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{retract_distance} F{speed} # retract a small distance after loading and purging
    G4 P2000
    G1 E-{unload_distance-retract_distance} F{max_velocity} # fast-unload
    M300 # beep
    M300 # beep
    RESTORE_GCODE_STATE NAME=unload_state

# from https://github.com/Klipper3d/klipper/blob/master/config/sample-macros.cfg
# The macro below will override the default M117 command to echo the message.
#
# It uses the rawparams pseudo-variable that contains the full unparsed
# parameters that was passed to the M117 command.
#
# As this can include comments, we are trimming the text when a `;` or `#` is
# found, and escaping any existing `"`

#M118 shows a pop up in screen and also in console
[gcode_macro M117]
rename_existing: M117.1
gcode:
  {% if rawparams %}
    {% set escaped_msg = rawparams.split(';', 1)[0].split('\x23', 1)[0]|replace('"', '\\"') %}
    SET_DISPLAY_TEXT MSG="{escaped_msg}"
    RESPOND TYPE=command MSG="{escaped_msg}"
  {% else %}
    SET_DISPLAY_TEXT
  {% endif %}

######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[pause_resume]

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state


#####################################################################
#   Modules
#####################################################################
[exclude_object] # Enable object exclusion

#####################################################################
#   Shell Commands Macros
#####################################################################
#example
#[gcode_shell_command hello_world]
#command: echo hello world
#timeout: 2.
#verbose: True
#[gcode_macro HELLO_WORLD]
#gcode:
#    RUN_SHELL_COMMAND CMD=hello_world

#https://staubgeborener.github.io/klipper-backup/manual/#shell
[gcode_macro update_git]
gcode:
    RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_macro update_kliper_config_octopus]
gcode:
    RUN_SHELL_COMMAND CMD=kliper_config_octopus_script

[gcode_shell_command kliper_config_octopus_script]
command: bash -c "cp /home/pi/.octopus_klipper_config /home/pi/klipper/.config"
timeout: 90.0
verbose: True

[gcode_macro update_kliper_config_nh]
gcode:
    RUN_SHELL_COMMAND CMD=kliper_config_nh_script

[gcode_shell_command kliper_config_nh_script]
command: bash -c "cp /home/pi/.nh_klipper_config /home/pi/klipper/.config"
timeout: 90.0
verbose: True

[gcode_macro get_shaper_graph]
gcode:
    RUN_SHELL_COMMAND CMD=get_x_png_script
    RUN_SHELL_COMMAND CMD=get_y_png_script

[gcode_shell_command get_x_png_script]
command: bash -c "~/klipper/scripts/calibrate_shaper.py /tmp/calibration_data_x_*.csv -o ~/printer_data/config/shaper_calibrate_x.png" 
timeout: 90.0
verbose: True

[gcode_shell_command get_y_png_script]
command: bash -c "~/klipper/scripts/calibrate_shaper.py /tmp/calibration_data_y_*.csv -o ~/printer_data/config/shaper_calibrate_y.png"
timeout: 90.0
verbose: True

#cp shaper_calibrate_x.png ~/printer_data/config/shaper_calibrate_x.png

#####################################################################
#   Nitehawk Fan Macros
#####################################################################
## This config file contains macros that can be used in conjunction with tacho-enabled part fans
##
## - PREFLIGHT_CHECK, add this to the beginning of your PRINT_START macro to check your PCF fans. 
##     If either of the fans are malfunctioning, the print job will be cancelled.

#[gcode_macro PCF_CHECK]
#description: sub-macro of PREFLIGHT CHECK, not intended to be used outside of parent macro
#gcode:
#  {% if printer.fan.rpm is not none %}
#    {% if printer.fan.rpm > 500 %}
#      {action_respond_info("Part fan self-test: PASS")}
#    {% else %}
#      CANCEL_PRINT
#      {action_respond_info("Part fan self-test: FAIL!")}
#    {% endif %}
#  {% endif %}

#[gcode_macro PREFLIGHT_CHECK]
#description: Use before print startup, checks the part fan for failures
#gcode:
#  M106 S128 ; turn on the part fan
#  G4 P2000  ; wait for the fan to spin up
#  M400
#  PCF_CHECK ; check part fan speed
#  M106 S0   ; turn off the part fan

#####################################################################
#   print_start macro
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Z_TILT_ADJUST if your printer is a Trident
## Quad gantry level if your printer is a V2
## Nevermore - if you have one

[gcode_macro PRINT_START]
gcode:
    # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
    {% set target_bed = params.BED|int %}
    {% set target_extruder = params.EXTRUDER|int %}
    {% set target_chamber = params.CHAMBER|default("40")|int %}
    {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

    SET_PIN PIN=caselight VALUE=1.00 #turn lights on
    
    # Homes the printer, sets absolute positioning, and updates the Stealthburner LEDs.
    STATUS_HOMING         # Sets SB-LEDs to homing-mode
    G28                   # Full home (XYZ)
    G90                   # Absolut position
    
    ##  Uncomment for bed mesh (1 of 2)
    BED_MESH_CLEAR       # Clears old saved bed mesh (if any)
    
    # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
    {% if params.BED|int > 90 %}
      SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
      STATUS_HEATING                                      # Sets SB-LEDs to heating-mode
      M106 S255                                           # Turns on the PT-fan
      G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
      M190 S{target_bed}                                  # Sets the target temp for the bed
      SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Displays info
      TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp
    
    # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
    {% else %}
      SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
      STATUS_HEATING                                      # Sets SB-LEDs to heating-mode
      G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
      M190 S{target_bed}                                  # Sets the target temp for the bed
      SET_DISPLAY_TEXT MSG="Soak for 5min"                # Displays info
      G4 P300000                                          # Waits 5 min for the bedtemp to stabilize
    {% endif %}
    
    # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
    SET_DISPLAY_TEXT MSG="Hotend: 150c"          # Displays info
    M109 S150                                    # Heats the nozzle to 150c
    
    ##  Uncomment for V2 (Quad gantry level AKA QGL)
    SET_DISPLAY_TEXT MSG="QGL"      # Displays info
    STATUS_LEVELING                 # Sets SB-LEDs to leveling-mode
    QUAD_GANTRY_LEVEL               # Levels the buildplate via QGL
    G28 Z                           # Homes Z again after QGL
    
    ##  Uncomment for bed mesh (2 of 2)
    SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
    STATUS_MESHING                     # Sets SB-LEDs to bed mesh-mode
    BED_MESH_CALIBRATE                 # Starts bed mesh
    
    # Heats up the nozzle up to target via data from slicer
    SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
    STATUS_HEATING                                                # Sets SB-LEDs to heating-mode
    SMART_PARK                                                    # KAMP SMART PARK feature
    M107                                                          # Turns off part cooling fan
    M109 S{target_extruder}                                       # Heats the nozzle to printing temp

    # Gets ready to print by doing a purge line and updating the SB-LEDs
    SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
    STATUS_PRINTING                                  # Sets SB-LEDs to printing-mode
    #LINE_PURGE                                      # KAMP line Purge 
    VORON_PURGE                                      # KAMP Voron Purge 

#####################################################################
#   print_end macro
#####################################################################
#   Use PRINT_END for the slicer ending script - please customize for your slicer of choice
[gcode_macro PRINT_END]
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    G92 E0                         ; zero the extruder again
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    M84                            ; Disable steppers

    SET_PIN PIN=caselight VALUE=0.00 #turn off lights
    BEDFANSOFF                     ; The Filter turn off
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    

######################################################################
# PID tune
######################################################################
#https://www.reddit.com/r/klippers/comments/y5jw8h/pid_tuning_macros/
[gcode_macro PID_EXTRUDER] 
description: PID Tune for the Extruder gcode:
gcode:
  {% set TARGET_TEMP = params.TARGET_TEMP|default(210)|float %}
  PID_CALIBRATE HEATER=extruder TARGET={TARGET_TEMP}
  TURN_OFF_HEATERS 
  SAVE_CONFIG

[gcode_macro PID_BED] 
description: PID Tune for the Bed gcode:
gcode:
  {% set TARGET_TEMP = params.TARGET_TEMP|default(60)|float %}
  PID_CALIBRATE HEATER=heater_bed TARGET={TARGET_TEMP}
  TURN_OFF_HEATERS 
  SAVE_CONFIG

######################################################################
# Input shaper 
######################################################################
#https://github.com/rootiest/zippy-klipper_config/blob/master/macros/ADXL_SHAPER.cfg

#[gcode_macro ADXL_SHAPE_ALL]
#description: Test resonances for both axis
#gcode:
#    M118 DO NOT TOUCH THE PRINTER UNTIL DONE!!!
#    #HOME_IF_NEEDED
#    SHAPER_CALIBRATE AXIS=x
#    SHAPER_CALIBRATE AXIS=y
#    RUN_SHELL_COMMAND CMD=adxl_shape_x
#    RUN_SHELL_COMMAND CMD=adxl_shape_y
#    M118 Test done
#    #SAVE_AND_RESTART
#
#[gcode_macro ADXL_SHAPE_X]
#description: Test resonances for X axis
#gcode:
#    M118 DO NOT TOUCH THE PRINTER UNTIL DONE!!!
#    #HOME_IF_NEEDED
#    SHAPER_CALIBRATE AXIS=x
#    RUN_SHELL_COMMAND CMD=adxl_shape_x
#    M118 Test done
#    #SAVE_AND_RESTART
#
#[gcode_macro ADXL_SHAPE_Y]
#description: Test resonances for Y axis
#gcode:
#    M118 DO NOT TOUCH THE PRINTER UNTIL DONE!!!
#    #HOME_IF_NEEDED
#    SHAPER_CALIBRATE AXIS=y
#    RUN_SHELL_COMMAND CMD=adxl_shape_y
#    M118 Test done
#    #SAVE_AND_RESTART
#
#[gcode_shell_command adxl_shape_x]
#command: sh ~/printer_data/config/shaper/adxl_shape_x.sh		# edit: ´/macro/shell_commands/´ to where your .sh file lays
#timeout: 60.
#verbose: True
#
#[gcode_shell_command adxl_shape_y]
#command: sh ~/printer_data/config/shaper/adxl_shape_y.sh		# edit: ´/macro/shell_commands/´ to where your .sh file lays
#timeout: 60.
#verbose: True

### name file: adxl_shape_x.sh
#~/klipper/scripts/calibrate_shaper.py /tmp/calibration_data_x_*.csv -o ~/printer_data/config/shaper_calibrate_x.png

### name file: adxl_shape_y.sh
#~/klipper/scripts/calibrate_shaper.py /tmp/calibration_data_y_*.csv -o ~/printer_data/config/shaper_calibrate_y.png

